[{"name":"app.R","content":"\r\n\r\n\r\nlibrary(shiny)\r\nlibrary(readxl)\r\nlibrary(readr)\r\nlibrary(writexl)\r\nlibrary(tools)\r\n\r\nui <- fluidPage(\r\n  titlePanel(\"Data Assignment Tool\"),\r\n  sidebarLayout(\r\n    sidebarPanel(\r\n      h4(\"Instructions\"),\r\n      p(\"1. Upload your dataset\"),\r\n      p(\"2. Select observation column\"),\r\n      p(\"3. Choose assignment type and set parameters\"),\r\n      p(\"4. Assign values\"),\r\n      p(\"5. Download the modified dataset\"),\r\n      \r\n      fileInput(\"file\", \"Choose Data File\", accept = c(\".csv\", \".xlsx\", \".xls\", \".txt\")),\r\n      \r\n      conditionalPanel(\r\n        condition = \"input.file && /\\\\.txt$/.test(input.file.name)\",\r\n        radioButtons(\"delimiter\", \"Text File Delimiter\",\r\n                     choices = c(Comma = \",\", Semicolon = \";\", Tab = \"\\\\t\"),\r\n                     selected = \",\")\r\n      ),\r\n      \r\n      selectInput(\"observation_col\", \"Select Observation/Session Column\", choices = NULL),\r\n      \r\n      radioButtons(\"assignment_type\", \"What to Assign\",\r\n                   choices = c(\"IDs only\" = \"id\",\r\n                               \"Phases only\" = \"phase\",\r\n                               \"Groups only\" = \"group\",\r\n                               \"IDs and Phases\" = \"id_phase\",\r\n                               \"IDs and Groups\" = \"id_group\",\r\n                               \"Phases and Groups\" = \"phase_group\",\r\n                               \"All three\" = \"all\"),\r\n                   selected = \"all\"),\r\n      \r\n      conditionalPanel(\r\n        condition = \"input.assignment_type == 'id' || input.assignment_type == 'id_phase' || input.assignment_type == 'id_group' || input.assignment_type == 'all'\",\r\n        numericInput(\"max_id\", \"Maximum ID Number\", value = 10, min = 1)\r\n      ),\r\n      \r\n      conditionalPanel(\r\n        condition = \"input.assignment_type == 'phase' || input.assignment_type == 'id_phase' || input.assignment_type == 'phase_group' || input.assignment_type == 'all'\",\r\n        textInput(\"possible_phases\", \"Possible Treatment Phases (comma-separated)\",\r\n                  value = \"Baseline, Treatment, Followup\")\r\n      ),\r\n      \r\n      conditionalPanel(\r\n        condition = \"input.assignment_type == 'group' || input.assignment_type == 'id_group' || input.assignment_type == 'phase_group' || input.assignment_type == 'all'\",\r\n        textInput(\"predefined_groups\", \"Predefined Groups (comma-separated)\",\r\n                  value = \"Control, Treatment, Placebo\"),\r\n        radioButtons(\"id_source\", \"ID Source for Group Assignment\",\r\n                     choices = c(\"Use existing ID variable\" = \"existing\",\r\n                                 \"Assign new IDs\" = \"new\"),\r\n                     selected = \"existing\"),\r\n        conditionalPanel(\r\n          condition = \"input.id_source == 'existing' && (input.assignment_type == 'group' || input.assignment_type == 'phase_group' || input.assignment_type == 'all')\",\r\n          selectInput(\"existing_id_col\", \"Select Existing ID Column\", choices = NULL)\r\n        )\r\n      ),\r\n      \r\n      radioButtons(\"download_format\", \"Download Format\",\r\n                   choices = c(\"Excel (.xlsx)\" = \"xlsx\", \"CSV (.csv)\" = \"csv\"),\r\n                   selected = \"xlsx\"),\r\n      \r\n      actionButton(\"init_assign\", \"Initialize Assignment\"),\r\n      downloadButton(\"download\", \"Download Modified Data\")\r\n    ),\r\n    \r\n    mainPanel(\r\n      conditionalPanel(\r\n        condition = \"input.init_assign > 0\",\r\n        tabsetPanel(\r\n          id = \"main_tabs\",\r\n          tabPanel(\"ID Assignment\", value = \"id_tab\",\r\n                   uiOutput(\"id_assignment_ui\"),\r\n                   br(),\r\n                   h4(\"ID Assignment Summary\"),\r\n                   tableOutput(\"id_summary_table\")),\r\n          tabPanel(\"Phase Assignment\", value = \"phase_tab\",\r\n                   uiOutput(\"phase_assignment_ui\"),\r\n                   br(),\r\n                   h4(\"Phase Assignment Summary\"),\r\n                   tableOutput(\"phase_summary_table\")),\r\n          tabPanel(\"Group Assignment\", value = \"group_tab\",\r\n                   uiOutput(\"group_assignment_ui\"),\r\n                   br(),\r\n                   h4(\"Group Assignment Summary\"),\r\n                   tableOutput(\"group_summary_table\"))\r\n        )\r\n      )\r\n    )\r\n  )\r\n)\r\n\r\nserver <- function(input, output, session) {\r\n  rv <- reactiveValues(data = NULL, unique_obs = NULL, unique_ids = NULL, initialized = FALSE)\r\n  \r\n  read_data_file <- function(filepath, ext, delimiter = \",\") {\r\n    switch(ext,\r\n           \"csv\" = read.csv(filepath),\r\n           \"xlsx\" = read_excel(filepath),\r\n           \"xls\" = read_excel(filepath),\r\n           \"txt\" = read_delim(filepath, delim = delimiter),\r\n           stop(\"Unsupported file type\")\r\n    )\r\n  }\r\n  \r\n  observeEvent(input$file, {\r\n    req(input$file)\r\n    ext <- tools::file_ext(input$file$name)\r\n    \r\n    tryCatch({\r\n      if (ext == \"txt\") {\r\n        rv$data <- read_data_file(input$file$datapath, ext, input$delimiter)\r\n      } else {\r\n        rv$data <- read_data_file(input$file$datapath, ext)\r\n      }\r\n      \r\n      if (inherits(rv$data, \"tbl_df\")) rv$data <- as.data.frame(rv$data)\r\n      \r\n      updateSelectInput(session, \"observation_col\", \r\n                        choices = names(rv$data),\r\n                        selected = character(0))\r\n      \r\n      updateSelectInput(session, \"existing_id_col\",\r\n                        choices = names(rv$data),\r\n                        selected = character(0))\r\n      \r\n      rv$initialized <- FALSE\r\n    }, error = function(e) {\r\n      showNotification(paste(\"Error reading file:\", e$message), type = \"error\")\r\n    })\r\n  })\r\n  \r\n  observeEvent(input$assignment_type, {\r\n    if (input$assignment_type == \"id\") {\r\n      updateTabsetPanel(session, \"main_tabs\", selected = \"id_tab\")\r\n    } else if (input$assignment_type == \"phase\") {\r\n      updateTabsetPanel(session, \"main_tabs\", selected = \"phase_tab\")\r\n    } else if (input$assignment_type == \"group\") {\r\n      updateTabsetPanel(session, \"main_tabs\", selected = \"group_tab\")\r\n    } else {\r\n      updateTabsetPanel(session, \"main_tabs\", selected = \"id_tab\")\r\n    }\r\n  })\r\n  \r\n  observeEvent(input$init_assign, {\r\n    req(rv$data, input$observation_col)\r\n    \r\n    if (input$assignment_type %in% c(\"id\", \"id_phase\", \"id_group\", \"all\") && !\"ID\" %in% names(rv$data)) {\r\n      rv$data$ID <- NA_character_\r\n    }\r\n    if (input$assignment_type %in% c(\"phase\", \"id_phase\", \"phase_group\", \"all\") && !\"Treatment_Phase\" %in% names(rv$data)) {\r\n      rv$data$Treatment_Phase <- NA_character_\r\n    }\r\n    if (input$assignment_type %in% c(\"group\", \"id_group\", \"phase_group\", \"all\") && !\"Group\" %in% names(rv$data)) {\r\n      rv$data$Group <- NA_character_\r\n    }\r\n    \r\n    rv$unique_obs <- unique(rv$data[[input$observation_col]])\r\n    \r\n    if (input$assignment_type %in% c(\"group\", \"id_group\", \"phase_group\", \"all\")) {\r\n      if (input$id_source == \"existing\" && !is.null(input$existing_id_col) && input$existing_id_col != \"\") {\r\n        rv$unique_ids <- unique(rv$data[[input$existing_id_col]])\r\n      } else {\r\n        if (\"ID\" %in% names(rv$data)) {\r\n          rv$unique_ids <- unique(na.omit(rv$data$ID))\r\n        }\r\n      }\r\n    } else {\r\n      if (\"ID\" %in% names(rv$data)) {\r\n        rv$unique_ids <- unique(na.omit(rv$data$ID))\r\n      }\r\n    }\r\n    \r\n    rv$initialized <- TRUE\r\n  })\r\n  \r\n  output$id_assignment_ui <- renderUI({\r\n    req(rv$initialized, rv$unique_obs, input$max_id, \r\n        input$assignment_type %in% c(\"id\", \"id_phase\", \"id_group\", \"all\"))\r\n    \r\n    valid_ids <- as.character(seq(1, input$max_id))\r\n    \r\n    lapply(seq_along(rv$unique_obs), function(i) {\r\n      current_id <- unique(rv$data$ID[rv$data[[input$observation_col]] == rv$unique_obs[i]])\r\n      current_id <- if (length(current_id) == 1) current_id else \"Unassigned\"\r\n      \r\n      fluidRow(\r\n        column(6, p(strong(paste(\"Observation:\", rv$unique_obs[i])))),\r\n        column(6, selectInput(\r\n          paste0(\"id_\", i), NULL,\r\n          choices = c(\"Unassigned\", valid_ids),\r\n          selected = current_id)\r\n        ))\r\n    })\r\n  })\r\n  \r\n  output$phase_assignment_ui <- renderUI({\r\n    req(rv$initialized, rv$unique_obs, input$possible_phases,\r\n        input$assignment_type %in% c(\"phase\", \"id_phase\", \"phase_group\", \"all\"))\r\n    \r\n    possible_phases <- trimws(unlist(strsplit(input$possible_phases, \",\")))\r\n    \r\n    lapply(seq_along(rv$unique_obs), function(i) {\r\n      current_phase <- unique(rv$data$Treatment_Phase[rv$data[[input$observation_col]] == rv$unique_obs[i]])\r\n      current_phase <- if (length(current_phase) == 1) current_phase else \"Unassigned\"\r\n      \r\n      fluidRow(\r\n        column(6, p(strong(paste(\"Observation:\", rv$unique_obs[i])))),\r\n        column(6, selectInput(\r\n          paste0(\"phase_\", i), NULL,\r\n          choices = c(\"Unassigned\", possible_phases),\r\n          selected = current_phase)\r\n        ))\r\n    })\r\n  })\r\n  \r\n  output$group_assignment_ui <- renderUI({\r\n    req(rv$initialized, rv$unique_ids, input$predefined_groups,\r\n        input$assignment_type %in% c(\"group\", \"id_group\", \"phase_group\", \"all\"))\r\n    \r\n    predefined_groups <- trimws(unlist(strsplit(input$predefined_groups, \",\")))\r\n    \r\n    lapply(seq_along(rv$unique_ids), function(i) {\r\n      current_group <- if (input$id_source == \"existing\") {\r\n        unique(rv$data$Group[rv$data[[input$existing_id_col]] == rv$unique_ids[i]])\r\n      } else {\r\n        unique(rv$data$Group[rv$data$ID == rv$unique_ids[i]])\r\n      }\r\n      current_group <- if (length(current_group) == 1) current_group else \"Unassigned\"\r\n      \r\n      fluidRow(\r\n        column(6, p(strong(paste(\"ID:\", rv$unique_ids[i])))),\r\n        column(6, selectInput(\r\n          paste0(\"group_\", i), NULL,\r\n          choices = c(\"Unassigned\", predefined_groups),\r\n          selected = current_group)\r\n        ))\r\n    })\r\n  })\r\n  \r\n  observe({\r\n    req(rv$initialized, rv$unique_obs, input$max_id,\r\n        input$assignment_type %in% c(\"id\", \"id_phase\", \"id_group\", \"all\"))\r\n    \r\n    lapply(seq_along(rv$unique_obs), function(i) {\r\n      observeEvent(input[[paste0(\"id_\", i)]], {\r\n        id <- input[[paste0(\"id_\", i)]]\r\n        rv$data$ID[rv$data[[input$observation_col]] == rv$unique_obs[i]] <- \r\n          if (id == \"Unassigned\") NA else id\r\n        rv$unique_ids <- unique(na.omit(rv$data$ID))\r\n      })\r\n    })\r\n  })\r\n  \r\n  observe({\r\n    req(rv$initialized, rv$unique_obs, input$possible_phases,\r\n        input$assignment_type %in% c(\"phase\", \"id_phase\", \"phase_group\", \"all\"))\r\n    \r\n    lapply(seq_along(rv$unique_obs), function(i) {\r\n      observeEvent(input[[paste0(\"phase_\", i)]], {\r\n        phase <- input[[paste0(\"phase_\", i)]]\r\n        rv$data$Treatment_Phase[rv$data[[input$observation_col]] == rv$unique_obs[i]] <- \r\n          if (phase == \"Unassigned\") NA else phase\r\n      })\r\n    })\r\n  })\r\n  \r\n  observe({\r\n    req(rv$initialized, rv$unique_ids, input$predefined_groups,\r\n        input$assignment_type %in% c(\"group\", \"id_group\", \"phase_group\", \"all\"))\r\n    \r\n    lapply(seq_along(rv$unique_ids), function(i) {\r\n      observeEvent(input[[paste0(\"group_\", i)]], {\r\n        group <- input[[paste0(\"group_\", i)]]\r\n        if (input$id_source == \"existing\" && !is.null(input$existing_id_col) && input$existing_id_col != \"\") {\r\n          rv$data$Group[rv$data[[input$existing_id_col]] == rv$unique_ids[i]] <- \r\n            if (group == \"Unassigned\") NA else group\r\n        } else {\r\n          rv$data$Group[rv$data$ID == rv$unique_ids[i]] <- \r\n            if (group == \"Unassigned\") NA else group\r\n        }\r\n      })\r\n    })\r\n  })\r\n  \r\n  output$id_summary_table <- renderTable({\r\n    req(rv$initialized, rv$data, input$max_id,\r\n        input$assignment_type %in% c(\"id\", \"id_phase\", \"id_group\", \"all\"))\r\n    \r\n    valid_ids <- as.character(seq(1, input$max_id))\r\n    \r\n    data.frame(\r\n      ID = c(valid_ids, \"Unassigned\"),\r\n      Count = c(\r\n        sapply(valid_ids, function(id) sum(rv$data$ID == id, na.rm = TRUE)),\r\n        sum(is.na(rv$data$ID))\r\n      )\r\n    )\r\n  })\r\n  \r\n  output$phase_summary_table <- renderTable({\r\n    req(rv$initialized, rv$data, input$possible_phases,\r\n        input$assignment_type %in% c(\"phase\", \"id_phase\", \"phase_group\", \"all\"))\r\n    \r\n    possible_phases <- trimws(unlist(strsplit(input$possible_phases, \",\")))\r\n    \r\n    data.frame(\r\n      Phase = c(possible_phases, \"Unassigned\"),\r\n      Count = c(\r\n        sapply(possible_phases, function(p) sum(rv$data$Treatment_Phase == p, na.rm = TRUE)),\r\n        sum(is.na(rv$data$Treatment_Phase))\r\n      )\r\n    )\r\n  })\r\n  \r\n  output$group_summary_table <- renderTable({\r\n    req(rv$initialized, rv$data, input$predefined_groups,\r\n        input$assignment_type %in% c(\"group\", \"id_group\", \"phase_group\", \"all\"))\r\n    \r\n    predefined_groups <- trimws(unlist(strsplit(input$predefined_groups, \",\")))\r\n    \r\n    data.frame(\r\n      Group = c(predefined_groups, \"Unassigned\"),\r\n      Count = c(\r\n        sapply(predefined_groups, function(g) sum(rv$data$Group == g, na.rm = TRUE)),\r\n        sum(is.na(rv$data$Group))\r\n      )\r\n    )\r\n  })\r\n  \r\n  # output$download <- downloadHandler(\r\n  #   filename = function() {\r\n  #     paste0(\"assigned_data_\", Sys.Date(), \".\", \r\n  #            ifelse(input$download_format == \"xlsx\", \"xlsx\", \"csv\"))\r\n  #   },\r\n  #   content = function(file) {\r\n  #     if (input$download_format == \"xlsx\") {\r\n  #       write_xlsx(rv$data, file)\r\n  #     } else {\r\n  #       write.csv(rv$data, file, row.names = FALSE)\r\n  #     }\r\n  #   }\r\n  # )\r\n  output$download <- downloadHandler(\r\n    filename = function() {\r\n      paste0(\"assigned_data_\", Sys.Date(), \".\", \r\n             ifelse(input$download_format == \"xlsx\", \"xlsx\", \"csv\"))\r\n    },\r\n    content = function(file) {\r\n      # Crear un objeto de enlace de archivo\r\n      if (input$download_format == \"xlsx\") {\r\n        # Para Excel\r\n        temp_file <- tempfile(fileext = \".xlsx\")\r\n        write_xlsx(rv$data, temp_file)\r\n        file.copy(temp_file, file)\r\n      } else {\r\n        # Para CSV\r\n        temp_file <- tempfile(fileext = \".csv\")\r\n        write.csv(rv$data, temp_file, row.names = FALSE)\r\n        file.copy(temp_file, file)\r\n      }\r\n    }\r\n  )\r\n}\r\n\r\nshinyApp(ui = ui, server = server)","type":"text"}]
